from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from .models import TaxCalculation, GSTCalculation
from io import BytesIO
from datetime import datetime


@login_required
def invoice_list(request):
    tax_calcs = TaxCalculation.objects.filter(user=request.user)
    gst_calcs = GSTCalculation.objects.filter(user=request.user)

    calc_type = request.GET.get('type', 'all')
    if calc_type == 'tax':
        calculations = tax_calcs
    elif calc_type == 'gst':
        calculations = gst_calcs
    else:
        calculations = list(tax_calcs) + list(gst_calcs)
        calculations.sort(key=lambda x: x.calculation_date, reverse=True)

    return render(request, 'invoices/list.html', {
        'invoices': calculations
    })


@login_required
def invoice_detail(request, id):
    # Try to find in tax calculations first
    try:
        calculation = TaxCalculation.objects.get(id=id, user=request.user)
        calc_type = 'TAX'
    except TaxCalculation.DoesNotExist:
        try:
            calculation = GSTCalculation.objects.get(id=id, user=request.user)
            calc_type = 'GST'
        except GSTCalculation.DoesNotExist:
            return HttpResponse('Calculation not found', status=404)

    return render(request, 'invoices/detail.html', {
        'invoice': calculation,
        'type': calc_type
    })


@login_required
def download_invoice(request, id):
    # Similar to detail view, find the calculation
    try:
        calculation = TaxCalculation.objects.get(id=id, user=request.user)
        calc_type = 'Income Tax'
    except TaxCalculation.DoesNotExist:
        try:
            calculation = GSTCalculation.objects.get(id=id, user=request.user)
            calc_type = 'GST'
        except GSTCalculation.DoesNotExist:
            return HttpResponse('Calculation not found', status=404)

    # Create PDF
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)

    # Header
    p.setFont("Helvetica-Bold", 24)
    p.drawString(50, 750, "TaxKar")
    p.setFont("Helvetica", 16)
    p.drawString(50, 720, f"{calc_type} Calculation Report")

    # Meta Information
    p.setFont("Helvetica", 12)
    p.drawString(50, 680, f"Date: {calculation.calculation_date.strftime('%d %b %Y')}")
    p.drawString(50, 660, f"Reference ID: {calculation.id}")

    # Calculation Details
    y = 620
    p.setFont("Helvetica-Bold", 14)
    p.drawString(50, y, "Calculation Details")
    p.setFont("Helvetica", 12)

    if calc_type == 'Income Tax':
        details = [
            ('Gross Income', f"₹ {calculation.gross_income}"),
            ('Tax Regime', calculation.tax_regime),
            ('Total Deductions', f"₹ {sum(calculation.deductions.values())}"),
            ('Calculated Tax', f"₹ {calculation.calculated_tax}")
        ]
    else:  # GST
        details = [
            ('Base Amount', f"₹ {calculation.base_amount}"),
            ('GST Rate', f"{calculation.gst_rate}%"),
            ('Calculated GST', f"₹ {calculation.calculated_gst}"),
            ('Transaction Type', calculation.transaction_type)
        ]

    y -= 30
    for label, value in details:
        y -= 20
        p.drawString(50, y, label)
        p.drawString(250, y, str(value))

    # Footer
    p.setFont("Helvetica", 8)
    p.drawString(50, 50, "Generated by TaxKar - For official use only")
    p.drawString(50, 35, datetime.now().strftime("%d/%m/%Y %H:%M:%S"))

    p.showPage()
    p.save()

    # FileResponse
    buffer.seek(0)
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{calc_type.lower().replace(" ", "_")}_{id}.pdf"'

    return response